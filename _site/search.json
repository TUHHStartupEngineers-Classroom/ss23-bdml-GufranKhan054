[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_ml_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "6.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n    select(symbol, date, adjusted) %>%          \n    filter(date >= \"2018-01-01\") %>%            \n    group_by(symbol) %>% \n    mutate(adj_lag = lag(adjusted)) %>% \n    filter(!is.na(adj_lag)) %>% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %>% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_ml_fundamentals.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.2 Step 2 - Convert to User-Item Format",
    "text": "6.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_ml_fundamentals.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.3 Step 3 - Perform K-Means Clustering",
    "text": "6.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\n\n  \n\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>% \n    select(-symbol) %>% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %>% glance()\n\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_ml_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.4 Step 4 - Find the optimal value of K",
    "text": "6.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>% \n    mutate(k_means = centers %>% map(kmeans_mapper),\n           glance = k_means %>% map(glance))\n\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>%\n    unnest(glance) %>%\n    select(centers, tot.withinss) %>%\n    \n    # Visualization\n    ggplot(aes(centers, tot.withinss)) +\n    geom_point(color = \"#2DC6D6\", size = 4) +\n    geom_line(color = \"#2DC6D6\", size = 1) +\n    # Add labels (which are repelled a little)\n    ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n    \n    # Formatting\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the customer are from the closes K-Means center\",\n    caption = \"Conclusion: Based on the Scree Plot, we select 3 clusters to segment the customer base.\")\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.5 Step 5 - Apply UMAP",
    "text": "6.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/k_means_mapped_tbl.rds\")\nk_means_mapped_tbl\n\n\n\n  \n\n\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <-\n    subset(stock_date_matrix_tbl, select = -symbol) %>%\n    umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n    as_tibble(.name_repair = \"unique\") %>% # argument is required to set names in the next step\n    set_names(c(\"x\", \"y\")) %>%\n    bind_cols(\n        stock_date_matrix_tbl %>% select(symbol)\n    )\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Output: umap_results_tbl\numap_results_tbl\n\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>%\n    ggplot(aes(x, y)) +\n    geom_point(alpha=0.5) + \n    ggrepel::geom_label_repel(aes(label = symbol), size = 2) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\") \n\n#> Warning: ggrepel: 492 unlabeled data points (too many overlaps). Consider\n#> increasing max.overlaps\n\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "6.6 Step 6 - Combine K-Means and UMAP",
    "text": "6.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/umap_results_tbl.rds\")\numap_results_tbl \n\n\n\n  \n\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n    pull(k_means) %>%\n    pluck(3)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\nkmeans_10_clusters_tbl <- k_means_obj %>% \n    augment(stock_date_matrix_tbl) %>%\n    # Select the data we need\n    select(symbol, .cluster)\nsp_500_index_tbl_result <-sp_500_index_tbl %>% select(symbol, company, sector)\numap_kmeans_results_tbl <- umap_results_tbl %>%\n    left_join(kmeans_10_clusters_tbl,by=\"symbol\") %>%\n    left_join(sp_500_index_tbl_result,by=\"symbol\")\n\n# Output: umap_kmeans_results_tbl \ntypeof(palette_light() %>% sample(3))\n\n#> [1] \"character\"\n\ntypeof(c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\"))\n\n#> [1] \"character\"\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>%\n    mutate(label_text = str_glue(\"SYMBOL: {symbol}\n                                 Cluster: {.cluster}\")) %>%\n    \n    ggplot(aes(V1, V2, color = .cluster)) +\n    # Geometries\n    geom_point(alpha=0.5) +\n    # Formatting\n    scale_color_manual(values= c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\")) +\n    labs(title = \"Company Segmentation: 2D Projection\",\n    subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/06_ml_dl.html",
    "href": "content/01_journal/06_ml_dl.html",
    "title": "06 Deep Learning",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .Rmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/06_ml_dl.html#second-level-header",
    "href": "content/01_journal/06_ml_dl.html#second-level-header",
    "title": "06 Deep Learning",
    "section": "1.1 Second level header",
    "text": "1.1 Second level header\nYou can add more headers by adding more hashtags. These won’t be put into the table of contents\n\nthird level header\nHere’s an even lower level header"
  },
  {
    "objectID": "content/01_journal/02_ml_supervised.html",
    "href": "content/01_journal/02_ml_supervised.html",
    "title": "02 Supervised ML",
    "section": "",
    "text": "library(tidymodels)\nlibrary(broom.mixed)\nlibrary(xgboost)\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\nlibrary(modeldata)\n# Data exploration\nbike_data_tbl <- readRDS(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/bike_orderlines.rds\")\nmodel_sales_tbl <- bike_data_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  #coord_flip() +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(\n    title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\"\n  )\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"C:/Users/Mohd Gufran/Documents/GitHub/ss23-bdml-GufranKhan054/raw_data/bike_features_tbl.rds\")\nbike_features_tbl <- bike_features_tbl %>% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(\n    `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl <- bike_features_tbl %>% \n  mutate(id = row_number()) %>% \n  mutate(frame_material = factor(frame_material)) %>%\n  select(id, everything()) \nbike_features_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\ntrain_data <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n# recipe\nbike_rec <- \n  recipe(frame_material ~ ., data = train_data) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) \nd <- summary(bike_rec)\nlr_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\")\nlr_mod\n\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_wflow <- \n  workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bike_rec)\nbike_wflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_fit <- \n  bike_wflow %>% \n  fit(data = train_data)\n\n#> Warning: glm.fit: algorithm did not converge\n\n\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#> ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> \n#> Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#> \n#> Coefficients:\n#>                (Intercept)                          id  \n#>                  9.988e+15                   2.418e+13  \n#>                     weight                       price  \n#>                 -8.112e+14                   2.302e+11  \n#>           shimano_dura_ace             shimano_ultegra  \n#>                 -4.560e+15                  -5.255e+15  \n#>                shimano_105              shimano_tiagra  \n#>                 -6.303e+15                  -7.264e+15  \n#>              shimano_deore                 shimano_slx  \n#>                  3.554e+14                  -4.593e+15  \n#>                shimano_grx                  Shimano_xt  \n#>                 -4.556e+15                   9.263e+14  \n#>              Shimano_saint                    SRAM_red  \n#>                  1.137e+16                  -7.325e+15  \n#>                 SRAM_force                  SRAM_rival  \n#>                 -5.482e+15                  -2.585e+15  \n#>                  SRAM_apex                    SRAM_xx1  \n#>                 -6.968e+15                   1.207e+15  \n#>                   SRAM_x01                     SRAM_gx  \n#>                  2.878e+15                   5.693e+14  \n#>                    SRAM_nx                     SRAM_sx  \n#>                  1.496e+15                  -1.650e+15  \n#>         Campagnolo_potenza     Campagnolo_super_record  \n#>                 -2.034e+15                  -5.276e+15  \n#>              shimano_nexus              shimano_alfine  \n#>                 -1.611e+14                   3.231e+14  \n#>          category_1_Gravel    category_1_Hybrid...City  \n#>                 -2.364e+15                  -7.748e+15  \n#>        category_1_Mountain             category_1_Road  \n#>                 -2.546e+15                   4.673e+15  \n#>        category_2_All.Road             category_2_City  \n#>                  2.561e+15                   4.650e+15  \n#>   category_2_Cross.Country       category_2_Cyclocross  \n#>                 -4.818e+13                  -2.186e+15  \n#>       category_2_Dirt.Jump         category_2_Downhill  \n#>                 -6.535e+15                  -5.247e+15  \n#>          category_2_E.City        category_2_E.Fitness  \n#>                  4.304e+15                  -4.824e+15  \n#>        category_2_E.Gravel       category_2_E.Mountain  \n#>                  7.616e+15                   3.609e+15  \n#>          category_2_E.Road       category_2_E.Trekking  \n#>                  8.917e+14                          NA  \n#>       category_2_Endurance           category_2_Enduro  \n#>                 -3.199e+15                  -1.433e+14  \n#>       category_2_Fat.Bikes             category_2_Race  \n#>                  2.622e+15                  -3.610e+14  \n#> \n#> ...\n#> and 34 more lines.\n\nbike_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n\n#> Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#> ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_pred <- \n  predict(bike_fit, test_data, type=\"prob\") %>% \n  bind_cols(test_data %>% select(frame_material, category_2)) \n\n#> Warning: There are new levels in a factor: Commuter:ON\n\n\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nbike_pred %>% \n  roc_curve(truth = frame_material, .pred_aluminium) %>% \n  autoplot()\n\n\n\n\n\n\n\nbike_pred %>% \n  roc_curve(truth = frame_material, .pred_carbon) %>% \n  autoplot()\n\n\n\n\n\n\n\nbike_pred\n\n\n\n  \n\n\nroc_al <- bike_pred %>% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car <- bike_pred %>% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n# Evaluation\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#> parsnip model object\n#> \n#> \n#> Call:\n#> stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#> \n#> Coefficients:\n#>              (Intercept)        category_2All-Road            category_2City  \n#>                  2337.00                   -462.67                  -1317.88  \n#>  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#>                   -71.67                   -883.83                  -1508.00  \n#>       category_2Downhill          category_2E-City       category_2E-Fitness  \n#>                  1349.66                    685.00                    705.33  \n#>       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#>                  1451.67                   1082.20                    582.00  \n#>     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#>                   987.71                   -477.65                    375.12  \n#>      category_2Fat Bikes            category_2Race         category_2Touring  \n#>                 -1460.00                    620.56                  -1196.34  \n#>          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#>                  -489.22                     21.92                   1507.00\n\ntest_data <- test_data %>% filter(category_2 != \"Fat Bikes\")\nyards <- model_01_linear_lm_simple\nyards\n\n#> parsnip model object\n#> \n#> \n#> Call:\n#> stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#> \n#> Coefficients:\n#>              (Intercept)        category_2All-Road            category_2City  \n#>                  2337.00                   -462.67                  -1317.88  \n#>  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#>                   -71.67                   -883.83                  -1508.00  \n#>       category_2Downhill          category_2E-City       category_2E-Fitness  \n#>                  1349.66                    685.00                    705.33  \n#>       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#>                  1451.67                   1082.20                    582.00  \n#>     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#>                   987.71                   -477.65                    375.12  \n#>      category_2Fat Bikes            category_2Race         category_2Touring  \n#>                 -1460.00                    620.56                  -1196.34  \n#>          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#>                  -489.22                     21.92                   1507.00\n\ng1 <- bike_features_tbl %>% \n  mutate(category_2 = as.factor(category_2) %>% \n           fct_reorder(price)) %>% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs(\n    title = \"Unit Price for Each Model\",\n    y = \"\", x = \"Category 2\"\n  )\ng1\n\n#> Warning: Groups with fewer than two data points have been dropped.\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n\n\n\n\n\n\nnew_race_alu <- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Race\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_race_alu\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_race_alu)\n\n\n\n  \n\n\nmodels_tbl <- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_race_alu_tbl <- models_tbl %>%\n  mutate(predictions = map(model, predict, new_data = new_race_alu)) %>%\n  unnest(predictions) %>%\n  mutate(category_2 = \"Race\") %>%\n  left_join(new_race_alu, by = \"category_2\")\npredictions_new_race_alu_tbl\n\n\n\n  \n\n\ng2 <- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_race_alu_tbl) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 3,\n                           data = predictions_new_race_alu_tbl)\ng2\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped."
  }
]